{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install virtualenv"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AaG8dBkEcDhc",
        "outputId": "9ed2fea7-429f-45fa-84b2-50d64ffadff8"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting virtualenv\n",
            "  Downloading virtualenv-20.25.0-py3-none-any.whl (3.8 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.8/3.8 MB\u001b[0m \u001b[31m11.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting distlib<1,>=0.3.7 (from virtualenv)\n",
            "  Downloading distlib-0.3.8-py2.py3-none-any.whl (468 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m468.9/468.9 kB\u001b[0m \u001b[31m19.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: filelock<4,>=3.12.2 in /usr/local/lib/python3.10/dist-packages (from virtualenv) (3.13.1)\n",
            "Requirement already satisfied: platformdirs<5,>=3.9.1 in /usr/local/lib/python3.10/dist-packages (from virtualenv) (4.1.0)\n",
            "Installing collected packages: distlib, virtualenv\n",
            "Successfully installed distlib-0.3.8 virtualenv-20.25.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!virtualenv /content/drive/MyDrive/cuda_env"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SxTys7mRcQJa",
        "outputId": "6e1d2bdb-6f87-4d7f-982a-e97519c102d8"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "created virtual environment CPython3.10.12.final.0-64 in 1304ms\n",
            "  creator CPython3Posix(dest=/content/drive/MyDrive/cuda_env, clear=False, no_vcs_ignore=False, global=False)\n",
            "  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/root/.local/share/virtualenv)\n",
            "    added seed packages: pip==23.3.1, setuptools==69.0.2, wheel==0.42.0\n",
            "  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!source /content/drive/MyDrive/cuda_env/bin/activate;"
      ],
      "metadata": {
        "id": "CKvg-2qMcl-j"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "!nvcc --version"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3RDSIZz1c5Fh",
        "outputId": "1c1192d8-f0fa-472a-c8fb-9951fdbd1294"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nvcc: NVIDIA (R) Cuda compiler driver\n",
            "Copyright (c) 2005-2023 NVIDIA Corporation\n",
            "Built on Tue_Aug_15_22:02:13_PDT_2023\n",
            "Cuda compilation tools, release 12.2, V12.2.140\n",
            "Build cuda_12.2.r12.2/compiler.33191640_0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!nvidia-smi"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hqAyKLBHc9-T",
        "outputId": "1f8353ad-54b2-49f4-d6a1-bc8a9c1eccf0"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fri Dec 15 05:54:32 2023       \n",
            "+---------------------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 535.104.05             Driver Version: 535.104.05   CUDA Version: 12.2     |\n",
            "|-----------------------------------------+----------------------+----------------------+\n",
            "| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                                         |                      |               MIG M. |\n",
            "|=========================================+======================+======================|\n",
            "|   0  Tesla T4                       Off | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   56C    P8               9W /  70W |      0MiB / 15360MiB |      0%      Default |\n",
            "|                                         |                      |                  N/A |\n",
            "+-----------------------------------------+----------------------+----------------------+\n",
            "                                                                                         \n",
            "+---------------------------------------------------------------------------------------+\n",
            "| Processes:                                                                            |\n",
            "|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n",
            "|        ID   ID                                                             Usage      |\n",
            "|=======================================================================================|\n",
            "|  No running processes found                                                           |\n",
            "+---------------------------------------------------------------------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install git+https://github.com/andreinechaev/nvcc4jupyter.git"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JLoTz0x6dOsH",
        "outputId": "61242f71-67f0-4c92-9571-1b3d4ad8c9d6"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting git+https://github.com/andreinechaev/nvcc4jupyter.git\n",
            "  Cloning https://github.com/andreinechaev/nvcc4jupyter.git to /tmp/pip-req-build-70os6mzs\n",
            "  Running command git clone --filter=blob:none --quiet https://github.com/andreinechaev/nvcc4jupyter.git /tmp/pip-req-build-70os6mzs\n",
            "  Resolved https://github.com/andreinechaev/nvcc4jupyter.git to commit 0a71d56e5dce3ff1f0dd2c47c29367629262f527\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: NVCCPlugin\n",
            "  Building wheel for NVCCPlugin (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for NVCCPlugin: filename=NVCCPlugin-0.0.2-py3-none-any.whl size=4293 sha256=ffb8498a6908914b9b1129197a4830e03ef0d4c0b69fcdae52a0fe272fc7cb58\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-6b69_zmd/wheels/a8/b9/18/23f8ef71ceb0f63297dd1903aedd067e6243a68ea756d6feea\n",
            "Successfully built NVCCPlugin\n",
            "Installing collected packages: NVCCPlugin\n",
            "Successfully installed NVCCPlugin-0.0.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%load_ext nvcc_plugin"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iyhj3f98dfvX",
        "outputId": "9428e870-2a51-47d2-cbbc-c02dd80d66b7"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "created output directory at /content/src\n",
            "Out bin /content/result.out\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tCPoFNzJxXuM"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Task2 Matrix Multiplication using global And Shared Memory**"
      ],
      "metadata": {
        "id": "0DLh4-cKxacl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%cu\n",
        "\n",
        "#include <iostream>\n",
        "#include <cmath>\n",
        "#include <cuda_runtime.h>\n",
        "#include <bits/stdc++.h>\n",
        "using namespace std;\n",
        "const int N = 4;\n",
        "__global__ void matrixAdd(int* a, int* b, int* c,int width)\n",
        "{\n",
        "__shared__ float sharedA[N];\n",
        "__shared__ float sharedB[N];\n",
        "int row = blockIdx.y * blockDim.y + threadIdx.y;\n",
        "int col = blockIdx.x * blockDim.x + threadIdx.x;\n",
        "\n",
        "\n",
        "\n",
        "if( row < width && col < width ){\n",
        "    // do the multiplication for one row and col\n",
        "\n",
        " int value = 0;\n",
        "    for(int k = 0; k < width; k++){\n",
        "          sharedA[row * width + k] = a[row * width + k];\n",
        "          sharedB[k * width + col] = b[k * width + col];\n",
        "      value += a[row * width + k] * b[k * width + col];\n",
        "    }\n",
        "    // store result\n",
        "    c[row * width + col] = value;\n",
        "  }\n",
        "\n",
        "}\n",
        "__global__ void matrixAddGlobal(int* a, int* b, int* c,int width)\n",
        "{\n",
        " float sharedA[N];\n",
        " float sharedB[N];\n",
        "int row = blockIdx.y * blockDim.y + threadIdx.y;\n",
        "int col = blockIdx.x * blockDim.x + threadIdx.x;\n",
        "\n",
        "\n",
        "\n",
        "if( row < width && col < width ){\n",
        "    // do the multiplication for one row and col\n",
        "\n",
        " int value = 0;\n",
        "    for(int k = 0; k < width; k++){\n",
        "          sharedA[row * width + k] = a[row * width + k];\n",
        "          sharedB[k * width + col] = b[k * width + col];\n",
        "      value += a[row * width + k] * b[k * width + col];\n",
        "    }\n",
        "    // store result\n",
        "    c[row * width + col] = value;\n",
        "  }\n",
        "\n",
        "}\n",
        "int main() {\n",
        "   clock_t start1, end1,start2,end2;\n",
        "  int * h_a, * h_b, * h_c,* h_c2; // Host matrices\n",
        "  int * d_a, * d_b, * d_c ,*d_c2; // Device matrices\n",
        "  // Allocate memory on the host\n",
        "  h_a = new int[N * N];\n",
        "  h_b = new int[N * N];\n",
        "  h_c = new int[N * N];\n",
        "   h_c2 = new int[N * N];\n",
        "  // Initialize matrices on the host\n",
        "  for (int i = 0; i < N * N; ++i) {\n",
        "    h_a[i] = i;\n",
        "    h_b[i] = 2 * i;\n",
        "  }\n",
        "  // Allocate memory on the device\n",
        "  cudaMalloc((void ** ) & d_a, N * N * sizeof(int));\n",
        "  cudaMalloc((void ** ) & d_b, N * N * sizeof(int));\n",
        "  cudaMalloc((void ** ) & d_c, N * N * sizeof(int));\n",
        "  cudaMalloc((void ** ) & d_c2, N * N * sizeof(int));\n",
        "  // Copy matrices from host to device\n",
        "  cudaMemcpy(d_a, h_a, N * N * sizeof(int), cudaMemcpyHostToDevice);\n",
        "  cudaMemcpy(d_b, h_b, N * N * sizeof(int), cudaMemcpyHostToDevice);\n",
        "  // Define block and grid sizes\n",
        "  dim3 blockSize(16, 16);\n",
        "  dim3 gridSize(ceil(static_cast < float > (N) / blockSize.x), ceil(static_cast < float > (N) / blockSize.y));\n",
        "  // Launch the kernel\n",
        "  start1 = clock();\n",
        "    start2 = clock();\n",
        "  matrixAdd << < gridSize, blockSize >>> (d_a, d_b, d_c, N);\n",
        "   end1 = clock();\n",
        "   matrixAddGlobal << < gridSize, blockSize >>> (d_a, d_b, d_c2, N);\n",
        "   end2= clock();\n",
        "  // Copy the result from device to host\n",
        "  cudaMemcpy(h_c, d_c, N * N * sizeof(int), cudaMemcpyDeviceToHost);\n",
        "cudaMemcpy(h_c2, d_c2, N * N * sizeof(int), cudaMemcpyDeviceToHost);\n",
        "  // Print the result\n",
        "  std::cout << \"Matrix A:\\n\";\n",
        "  for (int i = 0; i < N; ++i) {\n",
        "    for (int j = 0; j < N; ++j) {\n",
        "      std::cout << h_a[i * N + j] << \" \";\n",
        "    }\n",
        "    std::cout << \"\\n\";\n",
        "  }\n",
        "  std::cout << \"\\nMatrix B:\\n\";\n",
        "  for (int i = 0; i < N; ++i) {\n",
        "    for (int j = 0; j < N; ++j) {\n",
        "      std::cout << h_b[i * N + j] << \" \";\n",
        "    }\n",
        "    std::cout << \"\\n\";\n",
        "  }\n",
        "  std::cout << \"\\nResultant Matrix C:\\n\";\n",
        "  for (int i = 0; i < N; ++i) {\n",
        "    for (int j = 0; j < N; ++j) {\n",
        "      std::cout << h_c[i * N + j] << \" \";\n",
        "    }\n",
        "    std::cout << \"\\n\";\n",
        "  }\n",
        "  double time_taken = double(end1 - start1) / double(CLOCKS_PER_SEC);\n",
        "    cout << \"Time taken by program using Shared Memory: \" << fixed\n",
        "         << time_taken << setprecision(5);\n",
        "    cout << \" sec \" << endl;\n",
        "  printf(\"Matrix Multiplication using Global Memory \\n\");\n",
        "  std::cout << \"Matrix A:\\n\";\n",
        "  for (int i = 0; i < N; ++i) {\n",
        "    for (int j = 0; j < N; ++j) {\n",
        "      std::cout << h_a[i * N + j] << \" \";\n",
        "    }\n",
        "    std::cout << \"\\n\";\n",
        "  }\n",
        "  std::cout << \"\\nMatrix B:\\n\";\n",
        "  for (int i = 0; i < N; ++i) {\n",
        "    for (int j = 0; j < N; ++j) {\n",
        "      std::cout << h_b[i * N + j] << \" \";\n",
        "    }\n",
        "    std::cout << \"\\n\";\n",
        "  }\n",
        "  std::cout << \"\\nResultant Matrix C:\\n\";\n",
        "  for (int i = 0; i < N; ++i) {\n",
        "    for (int j = 0; j < N; ++j) {\n",
        "      std::cout << h_c2[i * N + j] << \" \";\n",
        "    }\n",
        "    std::cout << \"\\n\";\n",
        "  }\n",
        "   double time_taken1 = double(end2 - start2) / double(CLOCKS_PER_SEC);\n",
        "    cout << \"Time taken by program using GLobal Memory: \" << fixed\n",
        "         << time_taken1 << setprecision(5);\n",
        "    cout << \" sec \" << endl;\n",
        "  // Free memory on the device\n",
        "  cudaFree(d_a);\n",
        "  cudaFree(d_b);\n",
        "  cudaFree(d_c);\n",
        "  cudaFree(d_c2);\n",
        "  // Free memory on the host\n",
        "  delete[] h_a;\n",
        "  delete[] h_b;\n",
        "  delete[] h_c;\n",
        "   delete[] h_c2;\n",
        "  return 0;\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0WVglOpM4aPB",
        "outputId": "d7faf72f-4113-4c51-c861-17d6feaae4dd"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matrix A:\n",
            "0 1 2 3 \n",
            "4 5 6 7 \n",
            "8 9 10 11 \n",
            "12 13 14 15 \n",
            "\n",
            "Matrix B:\n",
            "0 2 4 6 \n",
            "8 10 12 14 \n",
            "16 18 20 22 \n",
            "24 26 28 30 \n",
            "\n",
            "Resultant Matrix C:\n",
            "112 124 136 148 \n",
            "304 348 392 436 \n",
            "496 572 648 724 \n",
            "688 796 904 1012 \n",
            "Time taken by program using Shared Memory: 0.000224 sec \n",
            "Matrix Multiplication using Global Memory \n",
            "Matrix A:\n",
            "0 1 2 3 \n",
            "4 5 6 7 \n",
            "8 9 10 11 \n",
            "12 13 14 15 \n",
            "\n",
            "Matrix B:\n",
            "0 2 4 6 \n",
            "8 10 12 14 \n",
            "16 18 20 22 \n",
            "24 26 28 30 \n",
            "\n",
            "Resultant Matrix C:\n",
            "112 124 136 148 \n",
            "304 348 392 436 \n",
            "496 572 648 724 \n",
            "688 796 904 1012 \n",
            "Time taken by program using GLobal Memory: 0.00024 sec \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "VI5ds0ceFONT"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}